name: "Master Scanning Pipeline"

on:
  workflow_dispatch:
    inputs:
      input_mode:
        description: "Input mode: single_domain, domain_list, or url_list"
        required: true
        type: choice
        options:
          - single_domain
          - domain_list
          - url_list
      targets:
        description: "Space-separated domains or URLs list (for url_list mode)"
        required: true
        type: string
      storage_repo:
        description: "SSH URL of private storage repository"
        required: true
        type: string
      custom_cookie:
        description: "Optional Cookie header"
        required: false
        type: string
        default: ""
      custom_header:
        description: "Optional extra header"
        required: false
        type: string
        default: ""
      scanners_to_run:
        description: "Comma-separated list of scanners to run (e.g., dalfox,sqli,nuclei-top10,x8,kxss,nuclei)"
        required: false
        type: string
        default: "x8,kxss"

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.build-matrix.outputs.domains }}
    steps:
      - name: Build domains JSON array
        id: build-matrix
        run: |
          # split targets on spaces
          IFS=' ' read -r -a arr <<< "${{ github.event.inputs.targets }}"
          json=$(printf '%s\n' "${arr[@]}" | jq -R . | jq -sc .)
          echo "domains=$json" >> $GITHUB_OUTPUT

  process-domain:
    name: Process each domain
    permissions:
      contents: read
    needs: setup-matrix
    if: ${{ github.event.inputs.input_mode != 'url_list' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        domain: ${{ fromJson(needs.setup-matrix.outputs.domains) }}
    env:
      STORAGE_REPO: ${{ github.event.inputs.storage_repo }}
      COOKIE: ${{ github.event.inputs.custom_cookie }}
      HEADER: ${{ github.event.inputs.custom_header }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y git jq
          go install github.com/tomnomnom/waybackurls@latest
          go install github.com/lc/gau/v2/cmd/gau@latest
          go install github.com/tomnomnom/unfurl@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Gather URLs
        run: |
          mkdir -p work
          echo "${{ matrix.domain }}" | waybackurls >> work/raw.txt
          echo "${{ matrix.domain }}" | gau >> work/raw.txt
          sort -u work/raw.txt > work/urls.txt

      - name: Prepare Scan Inputs
        run: |
          mkdir -p work/filtered
          # Extract parameters from the raw list of all URLs
          cat work/urls.txt | unfurl keys | sort -u > work/filtered/params.txt
          # Filter out common static file extensions to create a list for scanning
          grep -ivE "\\.(css|js|jpeg|jpg|png|gif|svg|ico|webp|pdf|mp4|mp3|eot|woff|woff2|ttf)(\\?.*)?$" work/urls.txt > work/filtered/non-static-urls.txt

      - name: Upload URL list for httpx
        uses: actions/upload-artifact@v4
        with:
          name: non-static-urls-${{ matrix.domain }}-${{ github.run_id }}
          path: work/filtered/non-static-urls.txt

      - name: Run parallel httpx scan
        id: httpx_scan
        uses: ${{ github.repository_owner }}/${{ github.event.repository.name }}/.github/workflows/httpx-workflow.yaml@${{ github.ref }}
        with:
          url_artifact_name: non-static-urls-${{ matrix.domain }}-${{ github.run_id }}
          run_id: ${{ github.run_id }}-${{ matrix.domain }}

      - name: Download live URL results
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.httpx_scan.outputs.result_artifact_name }}
          path: work/filtered

      - name: Commit discovery results
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone "$STORAGE_REPO" storage
          mkdir -p storage/${{ matrix.domain }}/discovery
          cp work/filtered/live-urls.txt storage/${{ matrix.domain }}/discovery/live-urls.txt
          cp work/filtered/params.txt     storage/${{ matrix.domain }}/discovery/params.txt
          cd storage
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Discovery for ${{ matrix.domain }}" || echo "No changes"
          git push

      - name: Trigger x8 & kxss scanners
        if: ${{ contains(github.event.inputs.scanners_to_run, 'x8') || contains(github.event.inputs.scanners_to_run, 'kxss') }}
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/bigidavii/Xss-Scanner/actions/workflows/x8-kxss-workflow.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ matrix.domain }}"'",
                "storage_repo": "'"$STORAGE_REPO"'",
                "custom_cookie": "'"$COOKIE"'",
                "custom_header": "'"$HEADER"'",
                "run_x8": ${{ contains(github.event.inputs.scanners_to_run, 'x8') }},
                "run_kxss": ${{ contains(github.event.inputs.scanners_to_run, 'kxss') }}
              }
            }'

      - name: Trigger Dalfox scanner
        if: contains(github.event.inputs.scanners_to_run, 'dalfox')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          # The user needs to replace ACCOUNT4 with their actual account name for the Dalfox scanner repo.
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/mamadzht-max/Dalfox-Scanner/actions/workflows/dalfox-scanner.yml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ matrix.domain }}"'",
                "storage_repo": "'"$STORAGE_REPO"'",
                "custom_cookie": "'"$COOKIE"'",
                "custom_header": "'"$HEADER"'"
              }
            }'

      - name: Trigger SQLi scanner
        if: contains(github.event.inputs.scanners_to_run, 'sqli')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/amirbigiss/Sqli-Scanner/actions/workflows/sqli-workflow-template.yaml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ matrix.domain }}"'",
                "storage_repo": "'"$STORAGE_REPO"'",
                "custom_cookie": "'"$COOKIE"'",
                "custom_header": "'"$HEADER"'"
              }
            }'

      - name: Trigger Nuclei scanner
        if: contains(github.event.inputs.scanners_to_run, 'nuclei') || contains(github.event.inputs.scanners_to_run, 'nuclei-top10')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/amirzhtttt-ctrl/Nuclei-Scanner/actions/workflows/nuclei-workflow-template.yaml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ matrix.domain }}"'",
                "storage_repo": "'"$STORAGE_REPO"'",
                "custom_cookie": "'"$COOKIE"'",
                "custom_header": "'"$HEADER"'"
              }
            }'

  url-gathering-legacy:
    name: URL Gathering (legacy)
    if: ${{ github.event.inputs.input_mode == 'url_list' }}
    runs-on: ubuntu-latest
    steps:
      - name: Build URL list
        run: |
          mkdir -p work
          echo "${{ github.event.inputs.targets }}" | tr ' ' '\n' > work/urls.txt
      - name: Upload raw URLs
        uses: actions/upload-artifact@v4
        with:
          name: raw-urls
          path: work/urls.txt

  probe-and-filter-legacy:
    name: Probe & Filter URLs (legacy)
    needs: url-gathering-legacy
    if: ${{ github.event.inputs.input_mode == 'url_list' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download raw URLs
        uses: actions/download-artifact@v4
        with:
          name: raw-urls
          path: work
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/tomnomnom/unfurl@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Filter live URLs
        run: |
          mkdir -p work/filtered
          cat work/urls.txt | httpx -silent -threads 50 > work/filtered/live-urls.txt
      - name: Extract parameters
        run: |
          cat work/urls.txt | unfurl querystring keys | sort -u > work/filtered/params.txt
      - name: Upload filtered results
        uses: actions/upload-artifact@v4
        with:
          name: filtered-urls
          path: work/filtered

  commit-results-legacy:
    name: Commit Legacy Results
    needs: probe-and-filter-legacy
    if: ${{ github.event.inputs.input_mode == 'url_list' }}
    runs-on: ubuntu-latest
    steps:
      - name: Compute target name
        id: tgt
        run: |
          echo "TARGET_NAME=url_list_${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "echo ${TARGET_NAME}"
      - name: Setup SSH
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: Clone storage repo
        run: |
          git clone "${{ github.event.inputs.storage_repo }}" storage
      - name: Download filtered results
        uses: actions/download-artifact@v4
        with:
          name: filtered-urls
          path: work/filtered
      - name: Copy to storage
        run: |
          mkdir -p storage/${{ steps.tgt.outputs.TARGET_NAME }}/discovery
          cp work/filtered/live-urls.txt storage/${{ steps.tgt.outputs.TARGET_NAME }}/discovery/live-urls.txt
          cp work/filtered/params.txt     storage/${{ steps.tgt.outputs.TARGET_NAME }}/discovery/params.txt
      - name: Commit & push
        run: |
          cd storage
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Legacy URL-list discovery: ${{ steps.tgt.outputs.TARGET_NAME }}" || echo "No changes"
          git push

  trigger-scanners-legacy:
    name: Trigger Scanners (legacy)
    needs: commit-results-legacy
    if: ${{ github.event.inputs.input_mode == 'url_list' }}
    runs-on: ubuntu-latest
    env:
      GH_PAT: ${{ secrets.GH_PAT }}
    steps:
      - name: Trigger x8 & kxss
        if: ${{ contains(github.event.inputs.scanners_to_run, 'x8') || contains(github.event.inputs.scanners_to_run, 'kxss') }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/bigidavii/Xss-Scanner/actions/workflows/x8-kxss-workflow.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ steps.tgt.outputs.TARGET_NAME }}"'",
                "storage_repo": "'"${{ github.event.inputs.storage_repo }}"'",
                "custom_cookie": "'"${{ github.event.inputs.custom_cookie }}"'",
                "custom_header": "'"${{ github.event.inputs.custom_header }}"'",
                "run_x8": ${{ contains(github.event.inputs.scanners_to_run, 'x8') }},
                "run_kxss": ${{ contains(github.event.inputs.scanners_to_run, 'kxss') }}
              }
            }'
      - name: Trigger Dalfox
        if: contains(github.event.inputs.scanners_to_run, 'dalfox')
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ACCOUNT4/Dalfox-Scanner/dispatches \
            -d '{
              "event_type": "dalfox-scan",
              "client_payload": {
                "target_name": "'"${{ steps.tgt.outputs.TARGET_NAME }}"'",
                "storage_repo": "'"${{ github.event.inputs.storage_repo }}"'",
                "custom_cookie": "'"${{ github.event.inputs.custom_cookie }}"'",
                "custom_header": "'"${{ github.event.inputs.custom_header }}"'"
              }
            }'

      - name: Trigger SQLi scanner
        if: contains(github.event.inputs.scanners_to_run, 'sqli')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/amirbigiss/Sqli-Scanner/actions/workflows/sqli-workflow-template.yaml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ steps.tgt.outputs.TARGET_NAME }}"'",
                "storage_repo": "'"${{ github.event.inputs.storage_repo }}"'",
                "custom_cookie": "'"${{ github.event.inputs.custom_cookie }}"'",
                "custom_header": "'"${{ github.event.inputs.custom_header }}"'"
              }
            }'
      - name: Trigger Nuclei scanner
        if: contains(github.event.inputs.scanners_to_run, 'nuclei') || contains(github.event.inputs.scanners_to_run, 'nuclei-top10')
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -s -X POST \
            -H "Authorization: token $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/amirzhtttt-ctrl/Nuclei-Scanner/actions/workflows/nuclei-workflow-template.yaml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "target_name": "'"${{ steps.tgt.outputs.TARGET_NAME }}"'",
                "storage_repo": "'"${{ github.event.inputs.storage_repo }}"'",
                "custom_cookie": "'"${{ github.event.inputs.custom_cookie }}"'",
                "custom_header": "'"${{ github.event.inputs.custom_header }}"'"
              }
            }'
